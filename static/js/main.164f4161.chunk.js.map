{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","canvasRef","React","createRef","componentDidMount","a","constraints","audio","video","facingMode","exact","console","log","navigator","mediaDevices","getUserMedia","document","querySelector","then","mediaStream","kind","srcObject","onloadedmetadata","e","play","webCamReturn","cocoSsd","modelPromise","onloadeddata","Promise","all","values","detectFrame","catch","error","warn","model","detect","predictions","renderPredictions","requestAnimationFrame","ctx","getContext","clearRect","canvas","width","height","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","className","autoPlay","playsInline","muted","ref","this","videoRef","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,qPCyM5BC,E,YA/Lb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAHRC,UAAYC,IAAMC,YAEA,EAMlBC,kBANkB,sBAMA,kCAAAC,EAAA,yDAIVC,EAAa,CAAEC,OAAO,EAI1BC,MAAO,CAAEC,WAAY,CAAEC,MAAO,iBAGpCC,QAAQC,IAAIC,YACJA,UAAUC,eAAgBD,UAAUC,aAAaC,aAZrC,iCAeRP,EAAQQ,SAASC,cAAc,SAfvB,SA6BcJ,UAAUC,aAAaC,aAAaT,GAC7DY,MAAK,SAAAC,GAEJR,QAAQC,IAAIO,GACZR,QAAQC,IAAIO,EAAYC,MACxBZ,EAAMa,UAAYF,EAElBX,EAAMc,iBAAmB,SAASC,GAClCf,EAAMgB,WArCI,cA6BNC,EA7BM,iBA0CeC,MA1Cf,QA0CNC,EA1CM,OA4CZnB,EAAMoB,aAAa,WACjBC,QAAQC,IAAI,CAACH,EAAcF,IAC1BP,MAAK,SAAAa,GAIJ,EAAKC,YAAYxB,EAAOuB,EAAO,OAEhCE,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,OArDN,kDA6DZvB,QAAQwB,KAAR,MA7DY,gCAkEdxB,QAAQC,IAAI,4BAlEE,0DANA,EA8EdoB,YAAc,SAACxB,EAAO4B,GAEpBzB,QAAQC,IAAI,gBAORwB,EAAMC,OAAO7B,GAAOU,MAAK,SAAAoB,GACvB3B,QAAQC,IAAI,kBAEV,EAAK2B,kBAAkBD,GAEvBE,uBAAsB,WACpB,EAAKR,YAAYxB,EAAO4B,UA7FtB,EA+GdG,kBAAoB,SAAAD,GAClB3B,QAAQC,IAAI,iBACZ,IAEM6B,EAFOzB,SAASC,cAAc,UAEjByB,WAAW,MAG9BD,EAAIE,UAAU,EAAG,EAAGF,EAAIG,OAAOC,MAAOJ,EAAIG,OAAOE,QAEjD,IAAMC,EAAO,kBACbN,EAAIM,KAAOA,EACXN,EAAIO,aAAe,UAEnBV,EAAYW,SAAQ,SAAAC,GAClB,IAAMC,EAAID,EAAWE,KAAK,GACpBC,EAAIH,EAAWE,KAAK,GACpBP,EAAQK,EAAWE,KAAK,GACxBN,EAASI,EAAWE,KAAK,GAG/BX,EAAIa,YAAc,OAClBb,EAAIc,UAAY,EAChBd,EAAIe,WAAWL,EAAGE,EAAGR,EAAOC,GAE5BL,EAAIgB,UAAY,UAEhB,IAAMC,EAAYjB,EAAIkB,YAAYT,EAAWU,OAAOf,MAC9CgB,EAAaC,SAASf,EAAM,IAGlCN,EAAIsB,SAASZ,EAAGE,EAAGK,EAAU,EAAGG,EAAa,MAG/CvB,EAAYW,SAAQ,SAAAC,GAClB,IAAMC,EAAID,EAAWE,KAAK,GACpBC,EAAIH,EAAWE,KAAK,GAE1BX,EAAIgB,UAAY,UAChBhB,EAAIuB,SAASd,EAAWU,MAAOT,EAAGE,OArJxB,E,sEA+JhB,OACE,yBAAKY,UAAU,OACb,2BACEA,UAAU,OACVC,UAAQ,EACRC,aAAW,EACXC,OAAK,EACLvB,MAAM,MACNC,OAAO,MACPuB,IAAKC,KAAKC,WAKV,4BACAN,UAAU,OACVpB,MAAM,MACNC,OAAO,a,GApLC0B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS/D,SAASgE,eAAe,SD2H3C,kBAAmBnE,WACrBA,UAAUoE,cAAcC,MAAMhE,MAAK,SAAAiE,GACjCA,EAAaC,kB","file":"static/js/main.164f4161.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\n\n \nclass App extends Component {\n  \n  canvasRef = React.createRef();\n\n  constructor(props){\n    super(props)\n    // this.videoRef = React.createRef();\n    // this.canvasRef = React.createRef();\n  }\n\n  componentDidMount=async()=> {\n    //navigator.mediaDevices.getUserMedia asks user to provide access to videoplayer and audio for user\n    //https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n \n    const constraints= { audio: true, \n      // facingMode: user is selected for mobile devices, otherwise it would be video: { facingMode: { exact: \"environment\" } } for the rear\n      // video: { facingMode: \"user\" }\n      // video: { facingMode: \"user\" }\n      video: { facingMode: { exact: \"environment\" } }\n      \n    }\nconsole.log(navigator)\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      \n      try{ \n        var video = document.querySelector('video');\n        \n        // var enumeratorPromise =await navigator.mediaDevices.enumerateDevices().then(function(devices){\n        //   let r=devices.filter(i=>i.kind==='videoinput')\n        //   // devices.forEach(function(dev){\n        //    console.log(r)\n        //    alert(r[0].label)\n        // //  })\n        // }\n          \n        // );\n        // console.log(enumeratorPromise)\n        \n\n        const webCamReturn= await navigator.mediaDevices.getUserMedia(constraints)\n        .then(mediaStream=>{\n          \n          console.log(mediaStream)\n          console.log(mediaStream.kind)\n          video.srcObject = mediaStream;\n          //basically if it loaded, then play\n          video.onloadedmetadata = function(e) {\n          video.play();\n          };\n        });\n\n\n        const modelPromise = await cocoSsd.load();\n\n        video.onloadeddata=()=>{\n          Promise.all([modelPromise, webCamReturn])\n          .then(values => {\n            // console.log(values)\n            // this.detectFrame(this.videoRef.current, values[0]);\n            \n            this.detectFrame(video, values[0]);\n          })\n          .catch(error => {\n            console.error(error);\n          });\n        }\n       \n\n\n      }\n      catch(e){\n        console.warn(e)\n      }\n     \n    }\n    else{\n      console.log('problems accessing video')\n    }\n  }\n\n\n     \n      detectFrame = (video, model) => {\n\n        console.log('video loaded')\n        // console.log(video)\n        // requestAnimationFrame(() => {\n        //         this.detectFrame(video, model);\n        //       });\n          // if(video.onloadeddata){\n            // console.log('vide loaded')\n            model.detect(video).then(predictions => {\n              console.log('video detected')\n              // if(video.onloadeddata=(e)=>({\n                this.renderPredictions(predictions);\n                // requestAnimationFrame is a callback function which repaints the animation, aka makes video recheck for renderPredicitons\n                requestAnimationFrame(() => {\n                  this.detectFrame(video, model);\n                });\n              })\n          // }else{\n          //   console.log('no viod')\n          //   requestAnimationFrame(() => {\n          //     this.detectFrame(video, model);\n          //   });\n            \n          // }\n       \n          \n          // });\n        \n       \n      }\n      \n    \n      renderPredictions = predictions => {\n        console.log('canvas opened')\n        var canvas = document.querySelector('canvas');\n        // const ctx = this.canvasRef.current.getContext(\"2d\");\n        const ctx = canvas.getContext(\"2d\");\n        \n        \n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        // Font options.\n        const font = \"20px sans-serif\";\n        ctx.font = font;\n        ctx.textBaseline = \"hanging\";\n        \n        predictions.forEach(prediction => {\n          const x = prediction.bbox[0];\n          const y = prediction.bbox[1];\n          const width = prediction.bbox[2];\n          const height = prediction.bbox[3];\n          // console.log(prediction)\n          // Draw the bounding box.\n          ctx.strokeStyle = \"blue\";\n          ctx.lineWidth = 5;\n          ctx.strokeRect(x, y, width, height);\n          // Draw the label background.\n          ctx.fillStyle = \"#00FFFF\";\n          \n          const textWidth = ctx.measureText(prediction.class).width;\n          const textHeight = parseInt(font, 10); // base 10\n          // console.log(textWidth)\n          // console.log(textHeight)\n          ctx.fillRect(x, y, textWidth+5, textHeight + 4);\n        });\n    \n        predictions.forEach(prediction => {\n          const x = prediction.bbox[0];\n          const y = prediction.bbox[1];\n          // Draw the text last to ensure it's on top.\n          ctx.fillStyle = \"#000000\";\n          ctx.fillText(prediction.class, x, y);\n          // ctx.fillText(`${prediction.class} and ${prediction.score}`, x, y);\n        });\n      \n\n      }\n  \n\n  render(){\n\n    return (\n      <div className=\"App\">\n        <video\n          className=\"size\"\n          autoPlay\n          playsInline\n          muted\n          width=\"600\"\n          height=\"500\"\n          ref={this.videoRef}\n          // width=\"600\"\n          // height=\"500\"\n          \n        />\n          <canvas\n          className=\"size\"\n          width=\"600\"\n          height=\"500\"\n          // border= \"2px solid blue\"\n          // border= '2px solid blue'\n          // ref={this.canvasRef}\n          // width=\"600\"\n          // height=\"450\"\n          // width='600'\n        />\n         \n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}